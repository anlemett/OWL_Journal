import warnings
warnings.filterwarnings('ignore')

import time
import os
import numpy as np
import matplotlib.pyplot as plt

DATA_DIR = os.path.join("..", "..")
DATA_DIR = os.path.join(DATA_DIR, "Data")
ML_DIR = os.path.join(DATA_DIR, "MLInput")
FIG_DIR = os.path.join(".", "Figures")

RANDOM_STATE = 0
PLOT = False

CHS = True
BINARY = False

MODEL = "SVC"
#MODEL = "KNN"

N_ITER = 100
N_SPLIT = 10
SCORING = 'f1_macro'
#SCORING = 'accuracy'

#TIME_INTERVAL_DURATION = 300
TIME_INTERVAL_DURATION = 180
#TIME_INTERVAL_DURATION = 60
#TIME_INTERVAL_DURATION = 30
#TIME_INTERVAL_DURATION = 10
#TIME_INTERVAL_DURATION = 1

def find_elbow_point(x, y):
    # Create a line between the first and last point
    line = np.array([x, y])
    point1 = line[:, 0]
    point2 = line[:, -1]

    # Calculate the distances
    #print("point1:", point1)
    #print("point2:", point2)
    #print("line:", line)
    distances = np.cross(point2-point1, point1-line.T)/np.linalg.norm(point2-point1)
    elbow_index = np.argmax(np.abs(distances))

    #return x[elbow_index]
    return elbow_index


##############
def main():
    
    #method1, 
    if MODEL == "SVC":
        if BINARY:
            #threshold=0.7
            bal_accuracies = [0.7151084082496034, 0.7059148598625066, 0.6774603384452671, 0.685027763088313, 0.6709148598625067, 0.6844368059227922, 0.6551084082496034, 0.6760364886303544, 0.6536567953463776, 0.6942345319936541, 0.6686700158646219, 0.7160629296668429, 0.727313590692755, 0.6984294024325753, 0.6240613432046536]
            f1_scores = [0.6757352083064074, 0.6601549996231629, 0.6460100304738876, 0.6455373537315283, 0.6427902615568601, 0.6490014642193461, 0.636370979087429, 0.6401367368205247, 0.6208250657981631, 0.6740247468326171, 0.6387443844786758, 0.6793595551605691, 0.6627108942715793, 0.5909533907874503, 0.5581566637372981]
        else:
            #threshold=0.7
            bal_accuracies = [0.6298640937856623, 0.6371511567589998, 0.6257044299201162, 0.6160665006743438, 0.653215582529308, 0.6577373171490818, 0.6662309368191721, 0.6561764705882352, 0.6794179894179895, 0.6891399522772073, 0.6759082892416226, 0.6858501919286233, 0.6430703392468098, 0.5541575889615106, 0.4164638447971781]
            f1_scores = [0.6280046751239983, 0.6363416268032769, 0.6184039506127835, 0.6111592707960752, 0.6483716508818267, 0.6514388545680916, 0.6608556263538345, 0.6464856533745816, 0.6593730406262736, 0.6529834225893891, 0.6507209051499754, 0.6634408758348541, 0.5979142971550508, 0.5205361667258581, 0.40492893714978273]
    elif MODEL == "KNN":
        if BINARY:
            #bal_accuracies = [0.6561964569011105, 0.6978503437334743, 0.6803093601269169, 0.666237440507668, 0.662809360126917, 0.692809360126917, 0.6713577472236911, 0.6629706504494977, 0.6421509783183501, 0.6789119513484929, 0.692809360126917, 0.6052564780539397, 0.6060483870967742, 0.6411832363828662, 0.6528225806451613, 0.6410483870967743, 0.6180116340560551, 0.6020967741935485, 0.5939925965097832, 0.5055248545742994]
            #f1_scores = [0.6749596766599707, 0.7266324572696569, 0.7095499922587016, 0.6910666105171919, 0.678310321738686, 0.700600705436316, 0.673880852705851, 0.6782346676246954, 0.6552141732133807, 0.6784614238654953, 0.7014526575731355, 0.6197191543796382, 0.6081485496632457, 0.6601014104215952, 0.6745093943562808, 0.6774419726967269, 0.6148149202563519, 0.6131511451528715, 0.5953543308783561, 0.5002157775892933]
            #threshold=0.8
            #bal_accuracies = [0.6120029085140137, 0.6095571126388154, 0.6271245372818616, 0.6927154944473823, 0.7276480698043363, 0.6461158117398201, 0.6617609730301427, 0.6911567953463775, 0.62465097831835, 0.614825489159175, 0.6121641988365945, 0.5911158117398203, 0.6112903225806452, 0.587325489159175, 0.5939925965097832, 0.5055248545742994]
            #f1_scores = [0.6357856783805304, 0.6338626062523234, 0.6479963517434314, 0.729734133691835, 0.7703491459736886, 0.6658116221950557, 0.7123231611673541, 0.7115639284698518, 0.631716974249678, 0.6145139073601548, 0.5981006662687886, 0.6033438376349806, 0.6196527130565589, 0.575317890397116, 0.5953543308783561, 0.5002157775892933]
            #threshold=0.7
            bal_accuracies = [0.6486964569011107, 0.6277287149656267, 0.6685893707033317, 0.6268416181914331, 0.6552154944473824, 0.6127154944473823, 0.5887638815441566, 0.5971641988365943, 0.614825489159175, 0.6121641988365945, 0.5911158117398203, 0.6112903225806452, 0.587325489159175, 0.5939925965097832, 0.5055248545742994]
            f1_scores = [0.6530290757182111, 0.656199515503876, 0.7028510237127616, 0.6603855611798526, 0.6884595709000811, 0.6412095983465775, 0.6059427691585402, 0.6146909743640915, 0.6145139073601548, 0.5981006662687886, 0.6033438376349806, 0.6196527130565589, 0.575317890397116, 0.5953543308783561, 0.5002157775892933]
        else:
            #bal_accuracies = [0.6298428260192965, 0.6316313932980598, 0.6327819275858492, 0.6446223674655046, 0.6396223674655046, 0.6239578794480755, 0.6126595082477435, 0.6056364768129474, 0.5837960369332917, 0.5912444236954041, 0.5844179894179894, 0.576923954767092, 0.5640854860462705, 0.5835615727772592, 0.6172232596742401, 0.5888800705467372, 0.5747883597883597, 0.5403501400560223, 0.5246540097520489, 0.45252412075941495]
            #f1_scores = [0.6470771582117573, 0.6467106972192276, 0.6497421722119074, 0.657095485279938, 0.6475179840951332, 0.6357037437470318, 0.6197357938747272, 0.6220927580168618, 0.5973138620979269, 0.5996799600082852, 0.6000477416193811, 0.5867279530828184, 0.5733109637248381, 0.5939561814948349, 0.6264527752834753, 0.5994320555057518, 0.582035039091393, 0.5537012151364973, 0.5241724036250079, 0.4360640023148575]
            #threshold=0.8
            #bal_accuracies = [0.6341887125220459, 0.6140860047722791, 0.6373155929038281, 0.6261012553169415, 0.6064934121796866, 0.6119255109451187, 0.5966272434899885, 0.6040626621018778, 0.6037540201265692, 0.6257812013694366, 0.5867927170868347, 0.5322388214545077, 0.5357962444236953, 0.5403501400560223, 0.5246540097520489, 0.45252412075941495]
            #f1_scores = [0.6512101693922745, 0.6274013086858568, 0.655510808200248, 0.6438993436370963, 0.6224544121391637, 0.6230628283216058, 0.612017928481492, 0.6207967120738196, 0.6181919668811318, 0.6437507901822619, 0.6021585396226085, 0.538073957754336, 0.5421032679987473, 0.5537012151364973, 0.5241724036250079, 0.4360640023148575]
            #threshold=0.7
            bal_accuracies = [0.6069135802469136, 0.6153911194107271, 0.6063995227720718, 0.6413352007469655, 0.6446104367672995, 0.6276014109347442, 0.6687021475256769, 0.6352251270878722, 0.6158667911609087, 0.5791020852785558, 0.5695544143583359, 0.5357962444236953, 0.5403501400560223, 0.5246540097520489, 0.45252412075941495]
            f1_scores = [0.6218396788353739, 0.6349465379181977, 0.6274629406649119, 0.6619347334733625, 0.6658002693853369, 0.6504960872196011, 0.6839338384046447, 0.6465410199909951, 0.6301217988602599, 0.5857100909537324, 0.5738442834559144, 0.5421032679987473, 0.5537012151364973, 0.5241724036250079, 0.4360640023148575]

    '''
    #method2
    if MODEL == "SVC":
        if BINARY:
            bal_accuracies = []
            f1_scores = []
        else:
            bal_accuracies = []
            f1_scores = []
    elif MODEL == "KNN":
        if BINARY:
            bal_accuracies = [0.6561964569011105, 0.6978503437334743, 0.6803093601269169, 0.666237440507668, 0.662809360126917, 0.692809360126917, 0.6713577472236911, 0.6629706504494977, 0.6421509783183501, 0.6789119513484929, 0.692809360126917, 0.6052564780539397, 0.6060483870967742, 0.6411832363828662, 0.6528225806451613, 0.6410483870967743, 0.6180116340560551, 0.6020967741935485, 0.5939925965097832, 0.5055248545742994]
            f1_scores = [0.6749596766599707, 0.7266324572696569, 0.7095499922587016, 0.6910666105171919, 0.678310321738686, 0.700600705436316, 0.673880852705851, 0.6782346676246954, 0.6552141732133807, 0.6784614238654953, 0.7014526575731355, 0.6197191543796382, 0.6081485496632457, 0.6601014104215952, 0.6745093943562808, 0.6774419726967269, 0.6148149202563519, 0.6131511451528715, 0.5953543308783561, 0.5002157775892933]
        else:
            bal_accuracies = [0.6298428260192965, 0.6316313932980598, 0.6327819275858492, 0.6454331362174499, 0.6352749247847287, 0.5790502126776637, 0.5960493827160493, 0.5862449424214129, 0.6044558564166407, 0.5666863782550057, 0.5531450357920946, 0.5652899678389876, 0.6195440398381575, 0.6219472974374934, 0.5685594978732234, 0.569347961406785, 0.5555908289241622, 0.5403501400560223, 0.47333281460732446, 0.45252412075941495]
            f1_scores = [0.6470771582117573, 0.6467106972192276, 0.6497421722119074, 0.667932457292075, 0.651107627370598, 0.5889910902216651, 0.6094706911450967, 0.5929505717918242, 0.6198418399359954, 0.5728652068255387, 0.5580371841665628, 0.5709074394165947, 0.6309459910049419, 0.6269789141799864, 0.567154991171355, 0.5707276766472015, 0.5589633308123937, 0.5537012151364973, 0.46973712236655574, 0.4360640023148575]
    '''
    bal_accuracies = bal_accuracies[::-1]
    y = np.array(bal_accuracies)
    f1_scores = f1_scores[::-1]
    y_ = np.array(f1_scores)
    x = np.array(range(1, len(y)+1))
        
    elbow_point_idx = find_elbow_point(x, y)
    elbow_point_num = elbow_point_idx + 1
    elbow_point_acc = y[elbow_point_idx]
    corr_f1 = y_[elbow_point_idx]
    #print(f"The elbow point for bal.accuracy is at {elbow_point_num} features.")
    #print(f"Bal.accuracy at the elbow point: {elbow_point_acc:.2f}")
    #print(f"Corresponding F1-score: {corr_f1:.2f}")
        
    elbow_point_f1_idx = find_elbow_point(x, y_)
    elbow_point_f1_num = elbow_point_f1_idx + 1
    elbow_point_f1 = y_[elbow_point_f1_idx]
    corr_acc = y[elbow_point_f1_idx]
    print(f"The elbow point for F1-score is at {elbow_point_f1_num} features.")
    print(f"F1-score at the elbow point: {elbow_point_f1:.2f}")
    #print(f"Corresponding bal.accuracy: {corr_acc:.2f}")
        
    filename = "chs"
    if BINARY:
        filename = filename + "_binary_"
    else:
        filename = filename + "_3classes_"
    filename = filename + MODEL
            
    # Plot accuracies
    fig0, ax0 = plt.subplots()
    ax0.plot(x, y, marker='o')
            
    ax0.set_xlabel('Number of Features', fontsize=14)
    ax0.set_ylabel('Balanced accuracy', fontsize=14)
    ax0.tick_params(axis='both', which='major', labelsize=12)
    ax0.tick_params(axis='both', which='minor', labelsize=10)
    plt.grid(True)
    acc_filename = filename + "_bal_acc.png"
    full_filename = os.path.join(FIG_DIR, acc_filename)
    #plt.gca().set_aspect('equal', adjustable='box')
    plt.savefig(full_filename, dpi=600)
    plt.show()
            
    # Plot F1-scores
    fig2, ax2 = plt.subplots()
    ax2.plot(x, y_, marker='o')
    ax2.set_xlabel('Number of Features', fontsize=14)
    ax2.set_ylabel('F1-score', fontsize=14)
    ax2.tick_params(axis='both', which='major', labelsize=12)
    ax2.tick_params(axis='both', which='minor', labelsize=10)
    plt.grid(True)
    f1_filename = filename + "_f1.png"
    full_filename = os.path.join(FIG_DIR, f1_filename)
    plt.tight_layout()
    plt.savefig(full_filename, dpi=600)
    plt.show()
        
    max_acc = max(bal_accuracies)
    max_index = bal_accuracies.index(max_acc)
    #print(f"Max_index: {max_index}")
    number_of_features = max_index + 1
    acc = bal_accuracies[max_index]
    f1 = f1_scores[max_index]
    #print("Optimal number of features by maximizing Bal.Accuracy")
    #print(f"Optimal number of features: {number_of_features}, Bal.Accuracy: {acc:.2f}, F1-score: {f1:.2f}")

    max_f1 = max(f1_scores)
    max_index = f1_scores.index(max_f1)
    #print(f"Max_index: {max_index}")
    number_of_features = max_index + 1
    acc = bal_accuracies[max_index]
    f1 = f1_scores[max_index]
    print("Optimal number of features by maximizing F1-score")
    #print(f"Optimal number of features: {number_of_features}, Bal.Accuracy: {acc:.2f}, F1-score: {f1:.2f}")
    print(f"Optimal number of features: {number_of_features}, F1-score: {f1:.2f}")
    

##############        

start_time = time.time()

main()

elapsed_time = time.time() - start_time
print(f"Elapsed time: {elapsed_time:.3f} seconds")
    